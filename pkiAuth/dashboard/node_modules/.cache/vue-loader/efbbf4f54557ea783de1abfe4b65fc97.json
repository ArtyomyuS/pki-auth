{"remainingRequest":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vishwas/work/pki-auth/pkiAuth/client/src/components/Symmetric.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/src/components/Symmetric.vue","mtime":1597556471459},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport symmetric from \"../crypto-lib/symmetric\";\n\nexport default {\n  name: \"HashPage\",\n  data() {\n    return {\n      plaintext: \"This is your secret message!\",\n      secretkey: \"Password1@\",\n      ciphertext: \"\"\n    };\n  },\n  methods: {\n    calculateHash: function() {\n      return symmetric.sha256hashStr(this.plaintext);\n    },\n    operation: function(op) {\n      try {\n        let res = \"\";\n        if (this.secretkey) {\n          switch (op) {\n            case \"encrypt\":\n              if (this.plaintext != \"\") {\n                res = symmetric.encryptData(this.secretkey, this.plaintext);\n                this.ciphertext = res;\n              } else {\n                alert(\"Error: Plaintext is empty\");\n              }\n              break;\n            case \"decrypt\":\n              if (this.ciphertext != \"\") {\n                res = symmetric.decryptData(this.secretkey, this.ciphertext);\n                this.plaintext = res;\n              } else {\n                alert(\"Error: Ciphertext is empty\");\n              }\n              break;\n            default:\n          }\n        } else {\n          alert(\"Error: Secret Key or Plain Text is empty\");\n        }\n      } catch (e) {\n        alert(`Error : ${e.message}`);\n      }\n    }\n  },\n  computed: {\n    // hashtext: function() {\n    //   return this.calculateHash();\n    // },\n    // ciphertext: function() {\n    //   return this.operation(\"encrypt\");\n    // },\n  }\n};\n",{"version":3,"sources":["Symmetric.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Symmetric.vue","sourceRoot":"src/components","sourcesContent":["<style scoped>\n.floatLeft {\n  float: left;\n}\n\n.floatRight {\n  float: right;\n}\n</style>\n\n<template>\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"row\">\n        <form action=\"#\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"floatLeft\">Secret Key:</label>\n            <input type=\"text\" v-model=\"secretkey\" class=\"form-control\" />\n          </div>\n          <div class=\"form-group\">\n            <label class=\"floatLeft\">Plain Text:</label>\n            <textarea class=\"form-control\" v-model=\"plaintext\" rows=\"8\" cols=\"50\"></textarea>\n          </div>\n          <div class=\"form-group floatLeft\">\n            <button\n              type=\"button\"\n              data-toggle=\"modal\"\n              ref=\"encrypt\"\n              @click=\"operation('encrypt')\"\n              class=\"btn btn-primary\"\n            >Encrypt</button>\n          </div>\n        </form>\n        <form action=\"#\" class=\"col-md-6\">\n          <div class=\"form-group\">\n            <label class=\"floatLeft\">Cipher Text:</label>\n            <textarea class=\"form-control\" v-model=\"ciphertext\" rows=\"9\" cols=\"50\"></textarea>\n          </div>\n          <div class=\"form-group floatLeft\">\n            <button\n              type=\"button\"\n              data-toggle=\"modal\"\n              ref=\"decrypt\"\n              @click=\"operation('decrypt')\"\n              class=\"btn btn-primary\"\n            >Decrypt</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport symmetric from \"../crypto-lib/symmetric\";\n\nexport default {\n  name: \"HashPage\",\n  data() {\n    return {\n      plaintext: \"This is your secret message!\",\n      secretkey: \"Password1@\",\n      ciphertext: \"\"\n    };\n  },\n  methods: {\n    calculateHash: function() {\n      return symmetric.sha256hashStr(this.plaintext);\n    },\n    operation: function(op) {\n      try {\n        let res = \"\";\n        if (this.secretkey) {\n          switch (op) {\n            case \"encrypt\":\n              if (this.plaintext != \"\") {\n                res = symmetric.encryptData(this.secretkey, this.plaintext);\n                this.ciphertext = res;\n              } else {\n                alert(\"Error: Plaintext is empty\");\n              }\n              break;\n            case \"decrypt\":\n              if (this.ciphertext != \"\") {\n                res = symmetric.decryptData(this.secretkey, this.ciphertext);\n                this.plaintext = res;\n              } else {\n                alert(\"Error: Ciphertext is empty\");\n              }\n              break;\n            default:\n          }\n        } else {\n          alert(\"Error: Secret Key or Plain Text is empty\");\n        }\n      } catch (e) {\n        alert(`Error : ${e.message}`);\n      }\n    }\n  },\n  computed: {\n    // hashtext: function() {\n    //   return this.calculateHash();\n    // },\n    // ciphertext: function() {\n    //   return this.operation(\"encrypt\");\n    // },\n  }\n};\n</script>\n\n\n"]}]}