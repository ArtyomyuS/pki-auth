{"remainingRequest":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/views/Login.vue","mtime":1597686400638},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getChallange } from \"lds-sdk\";\nimport QrcodeVue from \"qrcode.vue\";\nimport { sign } from \"lds-sdk\";\nconst {sha256hashStr} = require(\"../crypto-lib/symmetric\");\nexport default {\n  name: \"Login\",\n  components: {\n    QrcodeVue,\n  },\n  data() {\n    return {\n      active: 0,\n      username: \"\",\n      password: \"\",\n      host: location.hostname,\n      challenge: \"dddd\",\n      domain: location.host,\n      QRCodeValue: this.$route.query,\n      credentials: {},\n      userData: {},\n      proof: \"\",\n    };\n  },\n  created(){\n    // const url = `http://${this.host}:5000/api/auth/challenge`;\n    // fetch(url)\n    // .then(res => res.json())\n    // .then(json => {\n    //   if(json.status == 200){\n    //     this.challenge = json.message\n    //   }\n    // })\n    // .catch(e => alert(`Error: ${e.message}`))\n  },\n  mounted(){\n\n  },\n  methods: {\n    gotosubpage: (id) => {\n      this.$router.push(`${id}`);\n    },\n    async generateProof() {\n      this.credentials = JSON.parse(localStorage.getItem(\"credentials\"));\n      this.userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if((this.credentials && this.credentials['controller']) != null && (this.userData != null &&  this.userData['@context']) ){\n        const p = await sign({\n          doc: this.userData,\n          privateKeyBase58: this.credentials.keys.privateKeyBase58,\n          publicKey: this.credentials.keys.publicKey,\n          challenge: this.challenge.challenge,\n          domain: this.domain,\n        });\n        this.proof = JSON.stringify(p);\n      } else {\n        throw new Error(\"Both files are needed for generating proof\");\n      }\n    },\n    forceFileDownload(data, fileName) {\n      const url = window.URL.createObjectURL(new Blob([data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", fileName);\n      document.body.appendChild(link);\n      link.click();\n    },\n    async downloadProof() {\n      await this.generateProof();\n      this.forceFileDownload(this.proof, \"proof.json\");\n    },\n    onFileChange(event) {\n      try {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = readSuccess;\n        function readSuccess(evt) {\n          const fileJSON = JSON.parse(evt.target.result);\n          if (!fileJSON) throw new Error(\"Incorrect file\");\n          if (fileJSON[\"controller\"]) {\n            localStorage.setItem(\"credentials\", JSON.stringify(fileJSON));\n          } else if (fileJSON[\"@context\"]) {\n            localStorage.setItem(\"userData\", JSON.stringify(fileJSON));\n          } else {\n            throw new Error(\"Incorrect file\");\n          }\n        }\n        reader.readAsText(file);\n      } catch (e) {\n        alert(`Error: ${e.message}`);\n      }\n    },\n    async login(type) {\n     try{\n      let url = \"\";\n      let headers = {\n        \"Content-Type\": \"application/json\"\n      }\n      if (type === \"PKI\") {\n        url = `http://${this.host}:5000/api/auth/login_pki?type=PKI`;\n        headers['x-auth-token'] = this.challenge.JWTChallenge;\n        await this.generateProof();\n      } else {\n        url = `http://${this.host}:5000/api/auth/login`;\n      }\n      const userData = {\n        username: this.username,\n        password: this.password != \"\" ? sha256hashStr(this.password): this.password,\n        proof: this.proof,\n        controller: this.credentials ? this.credentials.controller: {},\n        publicKey: this.credentials && this.credentials.keys ? this.credentials.keys.publicKey: {},\n        challenge: this.challenge? this.challenge.challenge: \"\",\n        domain: this.domain,\n      };\n      \n      fetch(url, {\n        body: JSON.stringify(userData),\n        method: \"POST\",\n        headers: headers,\n      })\n        .then((res) => res.json())\n        .then((j) => {\n          if (j && j.status == 500) {\n            return alert(`Error:  ${j.error}`);\n          }\n          console.log('Validated')\n          localStorage.setItem(\"authToken\", j.message.jwtToken);\n          localStorage.setItem(\"user\", JSON.stringify(j.message.user));\n          if (localStorage.getItem(\"authToken\") != null) {\n            if (this.$route.params.nextUrl != null) {\n              this.$router.push(this.$route.params.nextUrl);\n            } else {\n              this.$router.push(\"home\");\n            }\n          }\n        });\n     }catch(e){\n       alert(`Error: ${e.message}`)\n     }\n      \n    },\n  },\n};\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"Login.vue","sourceRoot":"src/views","sourcesContent":["<style scoped>\n.addmargin {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.vue-logo-back {\n  background-color: black;\n}\n\n.logo {\n  width: 144px;\n}\n\n.fullbody {\n  width: 100%;\n}\n.floatLeft {\n  float: left;\n}\n.floatRight {\n  float: right;\n}\n</style>\n<template>\n  <!-- <div class=\"home\"> -->\n  <div class=\"row\">\n    <!-- <div class=\"col-md-6\" style=\"margin-left: 17%;\"> -->\n    <div class=\"col-md-4\" style=\"margin-left: 34%;\">\n      <b-card no-body style=\"padding: 40px\">\n        <h2>Admin Login</h2>\n        <hr />\n        <div class=\"row\">\n          <form action=\"#\" class=\"col-md-12\">\n            <div class=\"form-group\">\n              <input type=\"text\" class=\"form-control\" v-model=\"username\" placeholder=\"Username\" />\n            </div>\n            <div class=\"form-group\">\n              <input type=\"password\" class=\"form-control\" v-model=\"password\" placeholder=\"Password\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-6\">\n            <button\n              type=\"button\"\n              data-toggle=\"modal\"\n              @click=\"login('BASIC')\"\n              class=\"btn btn-primary floatLeft\"\n            >Login</button>\n          </div>\n          <div class=\"col-md-6 floatRight\">\n            Do not have account?\n            <a href=\"/dashboard/register\">SignUp</a>\n          </div>\n        </div>\n      </b-card>\n    </div>\n    <!-- <div class=\"col-md-4\">\n      <b-card no-body style=\"padding: 40px\">\n        <h2>PKI Authentication</h2>\n        <hr />\n        <div class=\"row\">\n          <form action=\"#\" class=\"col-md-12\">\n            <div class=\"form-group\">\n              <qrcode-vue :value=\"QRCodeValue\" :size=\"200\" level=\"H\"></qrcode-vue>\n              <label>Scan this QR code to authenticate!</label>\n            </div>\n            <hr />\n            <h2>Or</h2>\n            <div class=\"form-group\">\n              <label class=\"floatLeft\">Upload User Doc:</label>\n              <input\n                type=\"file\"\n                class=\"form-control\"\n                placeholder\n                @change=\"onFileChange\"\n                accept=\"*.json\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <label class=\"floatLeft\">Upload Credentials:</label>\n              <input type=\"file\" class=\"form-control\" placeholder @change=\"onFileChange\" />\n            </div>\n          </form>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-md-3\">\n            <button\n              type=\"button\"\n              data-toggle=\"modal\"\n              @click=\"downloadProof()\"\n              class=\"btn btn-primary floatLeft\"\n            >View Proof</button>\n          </div>\n          <div class=\"col-md-3\">\n            <button\n              type=\"button\"\n              data-toggle=\"modal\"\n              @click=\"login('PKI')\"\n              class=\"btn btn-primary floatLeft\"\n            >Login</button>\n          </div>\n          <div class=\"col-md-6 floatRight\">\n            Do not have account?\n            <a href=\"/dashboard/register_pki\">SignUp</a>\n          </div>\n        </div>\n      </b-card>\n    </div> -->\n  </div>\n  <!-- </div> -->\n</template>\n\n<script>\nimport { getChallange } from \"lds-sdk\";\nimport QrcodeVue from \"qrcode.vue\";\nimport { sign } from \"lds-sdk\";\nconst {sha256hashStr} = require(\"../crypto-lib/symmetric\");\nexport default {\n  name: \"Login\",\n  components: {\n    QrcodeVue,\n  },\n  data() {\n    return {\n      active: 0,\n      username: \"\",\n      password: \"\",\n      host: location.hostname,\n      challenge: \"dddd\",\n      domain: location.host,\n      QRCodeValue: this.$route.query,\n      credentials: {},\n      userData: {},\n      proof: \"\",\n    };\n  },\n  created(){\n    // const url = `http://${this.host}:5000/api/auth/challenge`;\n    // fetch(url)\n    // .then(res => res.json())\n    // .then(json => {\n    //   if(json.status == 200){\n    //     this.challenge = json.message\n    //   }\n    // })\n    // .catch(e => alert(`Error: ${e.message}`))\n  },\n  mounted(){\n\n  },\n  methods: {\n    gotosubpage: (id) => {\n      this.$router.push(`${id}`);\n    },\n    async generateProof() {\n      this.credentials = JSON.parse(localStorage.getItem(\"credentials\"));\n      this.userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if((this.credentials && this.credentials['controller']) != null && (this.userData != null &&  this.userData['@context']) ){\n        const p = await sign({\n          doc: this.userData,\n          privateKeyBase58: this.credentials.keys.privateKeyBase58,\n          publicKey: this.credentials.keys.publicKey,\n          challenge: this.challenge.challenge,\n          domain: this.domain,\n        });\n        this.proof = JSON.stringify(p);\n      } else {\n        throw new Error(\"Both files are needed for generating proof\");\n      }\n    },\n    forceFileDownload(data, fileName) {\n      const url = window.URL.createObjectURL(new Blob([data]));\n      const link = document.createElement(\"a\");\n      link.href = url;\n      link.setAttribute(\"download\", fileName);\n      document.body.appendChild(link);\n      link.click();\n    },\n    async downloadProof() {\n      await this.generateProof();\n      this.forceFileDownload(this.proof, \"proof.json\");\n    },\n    onFileChange(event) {\n      try {\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = readSuccess;\n        function readSuccess(evt) {\n          const fileJSON = JSON.parse(evt.target.result);\n          if (!fileJSON) throw new Error(\"Incorrect file\");\n          if (fileJSON[\"controller\"]) {\n            localStorage.setItem(\"credentials\", JSON.stringify(fileJSON));\n          } else if (fileJSON[\"@context\"]) {\n            localStorage.setItem(\"userData\", JSON.stringify(fileJSON));\n          } else {\n            throw new Error(\"Incorrect file\");\n          }\n        }\n        reader.readAsText(file);\n      } catch (e) {\n        alert(`Error: ${e.message}`);\n      }\n    },\n    async login(type) {\n     try{\n      let url = \"\";\n      let headers = {\n        \"Content-Type\": \"application/json\"\n      }\n      if (type === \"PKI\") {\n        url = `http://${this.host}:5000/api/auth/login_pki?type=PKI`;\n        headers['x-auth-token'] = this.challenge.JWTChallenge;\n        await this.generateProof();\n      } else {\n        url = `http://${this.host}:5000/api/auth/login`;\n      }\n      const userData = {\n        username: this.username,\n        password: this.password != \"\" ? sha256hashStr(this.password): this.password,\n        proof: this.proof,\n        controller: this.credentials ? this.credentials.controller: {},\n        publicKey: this.credentials && this.credentials.keys ? this.credentials.keys.publicKey: {},\n        challenge: this.challenge? this.challenge.challenge: \"\",\n        domain: this.domain,\n      };\n      \n      fetch(url, {\n        body: JSON.stringify(userData),\n        method: \"POST\",\n        headers: headers,\n      })\n        .then((res) => res.json())\n        .then((j) => {\n          if (j && j.status == 500) {\n            return alert(`Error:  ${j.error}`);\n          }\n          console.log('Validated')\n          localStorage.setItem(\"authToken\", j.message.jwtToken);\n          localStorage.setItem(\"user\", JSON.stringify(j.message.user));\n          if (localStorage.getItem(\"authToken\") != null) {\n            if (this.$route.params.nextUrl != null) {\n              this.$router.push(this.$route.params.nextUrl);\n            } else {\n              this.$router.push(\"home\");\n            }\n          }\n        });\n     }catch(e){\n       alert(`Error: ${e.message}`)\n     }\n      \n    },\n  },\n};\n</script>\n"]}]}