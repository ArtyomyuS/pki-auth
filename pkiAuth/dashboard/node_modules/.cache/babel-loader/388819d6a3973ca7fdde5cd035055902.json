{"remainingRequest":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/babel-loader/lib/index.js!/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/eslint-loader/index.js??ref--13-0!/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/crypto-lib/symmetric.js","dependencies":[{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/crypto-lib/symmetric.js","mtime":1597556471563},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\n * \n * npmjs.com/package/aes-js // symmetric key crypto\n * import { blake2b } from 'blakejs' // hash\n * import nacl from 'tweetnacl' // public key crypto\n    // \n    Keys:\n        - 128 bits \n        - 192 bits \n        - 256 bits\n\n\n    common modes of operation\n        - CBC (recommended)\n        - CFB \n        - CTR\n        - ECB\n        - OFB\n */\nvar aesjs = require('aes-js');\n\nvar shajs = require('sha.js');\n\nvar _require = require('blakejs'),\n    blake2b = _require.blake2b;\n\nvar CTR = aesjs.ModeOfOperation.ctr;\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @rtype (input: String) => hash: String\n * @param {String|Buffer} input - Data to hash\n * @return {Buffer} Hash\n */\n\nfunction blakeHash(input) {\n  return Buffer.from(blake2b(input, null, 32)); // 256 bits\n}\n/**\n * Calculate SHA256 hash of `input`\n * @rtype (input: String) => hash: String\n * @param {String} input - Data to hash\n * @return {String} Hash\n */\n\n\nfunction sha256hash(input) {\n  return shajs('sha256').update(input).digest();\n}\n\nfunction sha256hashStr(input) {\n  return aesjs.utils.hex.fromBytes(sha256hash(input));\n}\n/**\n * Encrypt given data using `password`\n * @rtype (password: String, binaryData: Buffer) => Uint8Array\n * @param {String} password - Password to encrypt with\n * @param {String} message - Data to encrypt\n * @return {String} Encrypted data\n */\n\n\nfunction encryptData(password, message) {\n  var binaryData = aesjs.utils.utf8.toBytes(message);\n  var hashedPasswordBytes = sha256hash(password);\n  var aesCtr = new CTR(hashedPasswordBytes);\n  var encryptedBytes = aesCtr.encrypt(binaryData);\n  return aesjs.utils.hex.fromBytes(encryptedBytes);\n}\n/**\n * Decrypt given data using `password`\n * @rtype (password: String, encrypted: String) => Uint8Array\n * @param {String} password - Password to decrypt with\n * @param {String} encrypted - Data to decrypt\n * @return {String} Decrypted data\n */\n\n\nfunction decryptData(password, encrypted) {\n  var encryptedBytes = aesjs.utils.hex.toBytes(encrypted);\n  var hashedPasswordBytes = sha256hash(password);\n  var aesCTR = new CTR(hashedPasswordBytes);\n  var decryptedBytes = aesCTR.decrypt(encryptedBytes);\n  return aesjs.utils.utf8.fromBytes(decryptedBytes);\n}\n\nmodule.exports = {\n  sha256hashStr: sha256hashStr,\n  encryptData: encryptData,\n  decryptData: decryptData,\n  blakeHash: blakeHash\n};\n/*\n\nconst message = \"Text may be any length you wish, no padding is required.\"\nconst secretKey = \"PassWord1@\"\nconst encryptedText = encryptData(secretKey, message)\nconst hash = sha256hashStr(message)\nconsole.log(`Plain text = ${message}`);\nconsole.log(`Secret Key = ${secretKey}`);\nconsole.log('--------------------------------------------------------')\nconsole.log(`HASH = ${hash}`)\nconsole.log(`Encrypted text = ${encryptedText}`);\nconst actuallMessage = decryptData(secretKey, encryptedText)\nconsole.log(`Plain text = ${actuallMessage}`)\n\n*/\n// https://github.com/aeternity/aepp-sdk-js/blob/f2088c405ff6071f6b809c279231a3dff40e6ffb/es/utils/crypto.js#L35",{"version":3,"sources":["/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/crypto-lib/symmetric.js"],"names":["aesjs","require","shajs","blake2b","CTR","ModeOfOperation","ctr","blakeHash","input","Buffer","from","sha256hash","update","digest","sha256hashStr","utils","hex","fromBytes","encryptData","password","message","binaryData","utf8","toBytes","hashedPasswordBytes","aesCtr","encryptedBytes","encrypt","decryptData","encrypted","aesCTR","decryptedBytes","decrypt","module","exports"],"mappings":"AACA;;;;;;;;;;;;;;;;;;;AAqBA,IAAOA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAOC,KAAK,GAAGD,OAAO,CAAC,QAAD,CAAtB;;eACqBA,OAAO,CAAC,SAAD,C;IAAnBE,O,YAAAA,O;;AAET,IAAMC,GAAG,GAAGJ,KAAK,CAACK,eAAN,CAAsBC,GAAlC;AACA;;;;;;;AAMA,SAASC,SAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAOC,MAAM,CAACC,IAAP,CAAYP,OAAO,CAACK,KAAD,EAAQ,IAAR,EAAc,EAAd,CAAnB,CAAP,CADuB,CACsB;AAC9C;AAEH;;;;;;;;AAMA,SAASG,UAAT,CAAqBH,KAArB,EAA4B;AACxB,SAAON,KAAK,CAAC,QAAD,CAAL,CAAgBU,MAAhB,CAAuBJ,KAAvB,EAA8BK,MAA9B,EAAP;AACD;;AAEH,SAASC,aAAT,CAAuBN,KAAvB,EAA6B;AAC3B,SAAOR,KAAK,CAACe,KAAN,CAAYC,GAAZ,CAAgBC,SAAhB,CAA0BN,UAAU,CAACH,KAAD,CAApC,CAAP;AACD;AAED;;;;;;;;;AAOA,SAASU,WAAT,CAAsBC,QAAtB,EAAgCC,OAAhC,EAAyC;AACrC,MAAMC,UAAU,GAAGrB,KAAK,CAACe,KAAN,CAAYO,IAAZ,CAAiBC,OAAjB,CAAyBH,OAAzB,CAAnB;AACA,MAAMI,mBAAmB,GAAGb,UAAU,CAACQ,QAAD,CAAtC;AACA,MAAMM,MAAM,GAAG,IAAIrB,GAAJ,CAAQoB,mBAAR,CAAf;AACA,MAAME,cAAc,GAAGD,MAAM,CAACE,OAAP,CAAeN,UAAf,CAAvB;AACA,SAAOrB,KAAK,CAACe,KAAN,CAAYC,GAAZ,CAAgBC,SAAhB,CAA0BS,cAA1B,CAAP;AACD;AAEH;;;;;;;;;AAOA,SAASE,WAAT,CAAsBT,QAAtB,EAAgCU,SAAhC,EAA2C;AACvC,MAAMH,cAAc,GAAG1B,KAAK,CAACe,KAAN,CAAYC,GAAZ,CAAgBO,OAAhB,CAAwBM,SAAxB,CAAvB;AACA,MAAML,mBAAmB,GAAGb,UAAU,CAACQ,QAAD,CAAtC;AACA,MAAMW,MAAM,GAAG,IAAI1B,GAAJ,CAAQoB,mBAAR,CAAf;AACA,MAAMO,cAAc,GAAGD,MAAM,CAACE,OAAP,CAAeN,cAAf,CAAvB;AACA,SAAO1B,KAAK,CAACe,KAAN,CAAYO,IAAZ,CAAiBL,SAAjB,CAA2Bc,cAA3B,CAAP;AACD;;AAGHE,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,aAAa,EAAbA,aADe;AAEfI,EAAAA,WAAW,EAAXA,WAFe;AAGfU,EAAAA,WAAW,EAAXA,WAHe;AAIfrB,EAAAA,SAAS,EAATA;AAJe,CAAjB;AAOA;;;;;;;;;;;;;;;AAeA","sourcesContent":["\n/**\n * \n * npmjs.com/package/aes-js // symmetric key crypto\n * import { blake2b } from 'blakejs' // hash\n * import nacl from 'tweetnacl' // public key crypto\n    // \n    Keys:\n        - 128 bits \n        - 192 bits \n        - 256 bits\n\n\n    common modes of operation\n        - CBC (recommended)\n        - CFB \n        - CTR\n        - ECB\n        - OFB\n */\n\n\nconst  aesjs = require('aes-js')\nconst  shajs = require('sha.js')\nconst  { blake2b } = require('blakejs')\n\nconst CTR = aesjs.ModeOfOperation.ctr\n/**\n * Calculate 256bits Blake2b hash of `input`\n * @rtype (input: String) => hash: String\n * @param {String|Buffer} input - Data to hash\n * @return {Buffer} Hash\n */\nfunction blakeHash (input) {\n    return Buffer.from(blake2b(input, null, 32)) // 256 bits\n  }\n\n/**\n * Calculate SHA256 hash of `input`\n * @rtype (input: String) => hash: String\n * @param {String} input - Data to hash\n * @return {String} Hash\n */\nfunction sha256hash (input) {\n    return shajs('sha256').update(input).digest()\n  }\n  \nfunction sha256hashStr(input){\n  return aesjs.utils.hex.fromBytes(sha256hash(input));\n}\n\n/**\n * Encrypt given data using `password`\n * @rtype (password: String, binaryData: Buffer) => Uint8Array\n * @param {String} password - Password to encrypt with\n * @param {String} message - Data to encrypt\n * @return {String} Encrypted data\n */\nfunction encryptData (password, message) {\n    const binaryData = aesjs.utils.utf8.toBytes(message)\n    const hashedPasswordBytes = sha256hash(password)\n    const aesCtr = new CTR(hashedPasswordBytes)\n    const encryptedBytes = aesCtr.encrypt(binaryData)\n    return aesjs.utils.hex.fromBytes(encryptedBytes)\n  }\n\n/**\n * Decrypt given data using `password`\n * @rtype (password: String, encrypted: String) => Uint8Array\n * @param {String} password - Password to decrypt with\n * @param {String} encrypted - Data to decrypt\n * @return {String} Decrypted data\n */\nfunction decryptData (password, encrypted) {\n    const encryptedBytes = aesjs.utils.hex.toBytes(encrypted);\n    const hashedPasswordBytes = sha256hash(password)\n    const aesCTR = new CTR(hashedPasswordBytes)\n    const decryptedBytes = aesCTR.decrypt(encryptedBytes)\n    return aesjs.utils.utf8.fromBytes(decryptedBytes);\n  }\n\n\nmodule.exports = {\n  sha256hashStr,\n  encryptData,\n  decryptData,\n  blakeHash\n}\n\n/*\n\nconst message = \"Text may be any length you wish, no padding is required.\"\nconst secretKey = \"PassWord1@\"\nconst encryptedText = encryptData(secretKey, message)\nconst hash = sha256hashStr(message)\nconsole.log(`Plain text = ${message}`);\nconsole.log(`Secret Key = ${secretKey}`);\nconsole.log('--------------------------------------------------------')\nconsole.log(`HASH = ${hash}`)\nconsole.log(`Encrypted text = ${encryptedText}`);\nconst actuallMessage = decryptData(secretKey, encryptedText)\nconsole.log(`Plain text = ${actuallMessage}`)\n\n*/\n// https://github.com/aeternity/aepp-sdk-js/blob/f2088c405ff6071f6b809c279231a3dff40e6ffb/es/utils/crypto.js#L35\n"]}]}