{"remainingRequest":"/home/vishwas/work/pki-auth/auth/client/node_modules/babel-loader/lib/index.js!/home/vishwas/work/pki-auth/auth/client/node_modules/eslint-loader/index.js??ref--13-0!/home/vishwas/work/pki-auth/auth/client/src/crypto-lib/zkp.js","dependencies":[{"path":"/home/vishwas/work/pki-auth/auth/client/src/crypto-lib/zkp.js","mtime":1597556471567},{"path":"/home/vishwas/work/pki-auth/auth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/auth/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/auth/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// Zero knowledge proof of age\n// Using concept of hash chaining\n// Ref: https://www.stratumn.com/thinking/zero-knowledge-proof-of-age-using-hash-chains/\nvar _require = require(\"./symmetric\"),\n    sha256hashStr = _require.sha256hashStr;\n\nvar asymm = require(\"./asymmetric\");\n\nvar getIteratedHash = function getIteratedHash(number, data) {\n  if (number <= 0) return data;\n  return getIteratedHash(--number, sha256hashStr(data));\n};\n\nvar generateProof = function generateProof(actualAge, ageToProof) {\n  if (!actualAge || !ageToProof) throw new Error(\"Invalid actual age = \".concat(actualAge, \" or age to proof = \").concat(ageToProof));\n  actualAge = parseInt(actualAge);\n  ageToProof = parseInt(ageToProof);\n  var randomString = \"random_\" + asymm.generateKeyPair().publicKey;\n  return {\n    proof: getIteratedHash(1 + actualAge, randomString),\n    challange: getIteratedHash(1 + actualAge - ageToProof, randomString)\n  };\n};\n\nvar verifyProof = function verifyProof(ageToProof, provingKit) {\n  var challange = provingKit.challange,\n      proof = provingKit.proof;\n  if (!challange || !proof) throw new Error('Invalid proving kit');\n  if (challange.indexOf('random_') >= 0) return false;\n  var temp_proof = getIteratedHash(ageToProof, challange);\n  if (temp_proof === proof) return true;\n  return false;\n};\n\nmodule.exports = {\n  generateProof: generateProof,\n  verifyProof: verifyProof\n};",{"version":3,"sources":["/home/vishwas/work/pki-auth/auth/client/src/crypto-lib/zkp.js"],"names":["require","sha256hashStr","asymm","getIteratedHash","number","data","generateProof","actualAge","ageToProof","Error","parseInt","randomString","generateKeyPair","publicKey","proof","challange","verifyProof","provingKit","indexOf","temp_proof","module","exports"],"mappings":"AAAA;AACA;AACA;eAE4BA,OAAO,e;IAA3BC,a,YAAAA,a;;AACR,IAAMC,KAAK,GAAGF,OAAO,gBAArB;;AAGA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,MAAD,EAASC,IAAT,EAAkB;AACtC,MAAGD,MAAM,IAAI,CAAb,EAAgB,OAAOC,IAAP;AAChB,SAAOF,eAAe,CAAC,EAAEC,MAAH,EAAWH,aAAa,CAACI,IAAD,CAAxB,CAAtB;AACH,CAHD;;AAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,UAAZ,EAA2B;AAC7C,MAAG,CAACD,SAAD,IAAc,CAACC,UAAlB,EAA8B,MAAM,IAAIC,KAAJ,gCAAkCF,SAAlC,gCAAiEC,UAAjE,EAAN;AAC9BD,EAAAA,SAAS,GAAGG,QAAQ,CAACH,SAAD,CAApB;AACAC,EAAAA,UAAU,GAAGE,QAAQ,CAACF,UAAD,CAArB;AACA,MAAMG,YAAY,GAAG,YAAYT,KAAK,CAACU,eAAN,GAAwBC,SAAzD;AACA,SAAO;AACHC,IAAAA,KAAK,EAAEX,eAAe,CAAC,IAAGI,SAAJ,EAAeI,YAAf,CADnB;AAEHI,IAAAA,SAAS,EAAEZ,eAAe,CAAC,IAAGI,SAAH,GAAeC,UAAhB,EAA4BG,YAA5B;AAFvB,GAAP;AAIH,CATD;;AAWA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACR,UAAD,EAAaS,UAAb,EAA4B;AAAA,MACpCF,SADoC,GACfE,UADe,CACpCF,SADoC;AAAA,MACzBD,KADyB,GACfG,UADe,CACzBH,KADyB;AAE5C,MAAG,CAACC,SAAD,IAAc,CAACD,KAAlB,EAAyB,MAAM,IAAIL,KAAJ,CAAU,qBAAV,CAAN;AACzB,MAAGM,SAAS,CAACG,OAAV,CAAkB,SAAlB,KAAgC,CAAnC,EAAsC,OAAO,KAAP;AACtC,MAAMC,UAAU,GAAGhB,eAAe,CAACK,UAAD,EAAaO,SAAb,CAAlC;AACA,MAAGI,UAAU,KAAKL,KAAlB,EAAyB,OAAO,IAAP;AACzB,SAAO,KAAP;AACH,CAPD;;AASAM,MAAM,CAACC,OAAP,GAAiB;AACbf,EAAAA,aAAa,EAAbA,aADa;AAEbU,EAAAA,WAAW,EAAXA;AAFa,CAAjB","sourcesContent":["// Zero knowledge proof of age\n// Using concept of hash chaining\n// Ref: https://www.stratumn.com/thinking/zero-knowledge-proof-of-age-using-hash-chains/\n\nconst { sha256hashStr }  =  require('./symmetric')\nconst asymm = require('./asymmetric') \n\n\nconst getIteratedHash = (number, data) => {\n    if(number <= 0) return data\n    return getIteratedHash(--number, sha256hashStr(data))\n}\n\nconst generateProof = (actualAge, ageToProof) => {\n    if(!actualAge || !ageToProof) throw new Error(`Invalid actual age = ${actualAge} or age to proof = ${ageToProof}`)\n    actualAge = parseInt(actualAge);\n    ageToProof = parseInt(ageToProof);\n    const randomString = \"random_\" + asymm.generateKeyPair().publicKey;\n    return {\n        proof: getIteratedHash(1+ actualAge, randomString),\n        challange: getIteratedHash(1+ actualAge - ageToProof, randomString),\n    }\n}\n\nconst verifyProof = (ageToProof, provingKit) => {\n    const { challange, proof } = provingKit;\n    if(!challange || !proof) throw new Error('Invalid proving kit');\n    if(challange.indexOf('random_') >= 0) return false\n    const temp_proof = getIteratedHash(ageToProof, challange)\n    if(temp_proof === proof) return true\n    return false\n}\n\nmodule.exports = {\n    generateProof,\n    verifyProof\n}"]}]}