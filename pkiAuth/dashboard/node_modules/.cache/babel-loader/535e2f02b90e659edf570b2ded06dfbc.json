{"remainingRequest":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/babel-loader/lib/index.js!/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vishwas/work/pki-auth/pkiAuth/client/src/components/zkp.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/src/components/zkp.vue","mtime":1597556471531},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar asymmetric = require(\"../crypto-lib/asymmetric\");\n\nvar zkp = require(\"../crypto-lib/zkp\");\n\nexport default {\n  name: \"ZKPPage\",\n  components: {},\n  data: function data() {\n    return {\n      actualAge: 38,\n      ageToProve: 18,\n      proof: \"\"\n    };\n  },\n  created: function created() {},\n  methods: {\n    operation: function operation(op) {\n      try {\n        var res = \"\";\n\n        switch (op) {\n          case \"generateProof\":\n            if (this.actualAge != \"\" && this.ageToProve != \"\") {\n              res = zkp.generateProof(this.actualAge, this.ageToProve);\n              this.proof = JSON.stringify(res);\n            } else {\n              alert(\"Error: Actual age or Age to prove can not be empty\");\n            }\n\n            break;\n\n          case \"verifyProof\":\n            if (this.proof != {} || this.ageToProve != \"\") {\n              res = zkp.verifyProof(this.ageToProve, JSON.parse(this.proof));\n              alert(res);\n            } else {\n              alert(\"Error: Proving kit or Age to prove is empty\");\n            }\n\n            break;\n\n          default:\n        }\n      } catch (e) {\n        alert(\"Error : \".concat(e.message));\n      }\n    }\n  }\n};",{"version":3,"sources":["zkp.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwIA,IAAA,UAAA,GAAA,OAAA,4BAAA;;AACA,IAAA,GAAA,GAAA,OAAA,qBAAA;;AACA,eAAA;AACA,EAAA,IAAA,EAAA,SADA;AAEA,EAAA,UAAA,EAAA,EAFA;AAGA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,UAAA,EAAA,EAFA;AAGA,MAAA,KAAA,EAAA;AAHA,KAAA;AAKA,GATA;AAUA,EAAA,OAVA,qBAUA,CAAA,CAVA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,SAAA,EAAA,mBAAA,EAAA,EAAA;AACA,UAAA;AACA,YAAA,GAAA,GAAA,EAAA;;AACA,gBAAA,EAAA;AACA,eAAA,eAAA;AACA,gBAAA,KAAA,SAAA,IAAA,EAAA,IAAA,KAAA,UAAA,IAAA,EAAA,EAAA;AACA,cAAA,GAAA,GAAA,GAAA,CAAA,aAAA,CAAA,KAAA,SAAA,EAAA,KAAA,UAAA,CAAA;AACA,mBAAA,KAAA,GAAA,IAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,aAHA,MAGA;AACA,cAAA,KAAA,CAAA,oDAAA,CAAA;AACA;;AACA;;AACA,eAAA,aAAA;AACA,gBAAA,KAAA,KAAA,IAAA,EAAA,IAAA,KAAA,UAAA,IAAA,EAAA,EAAA;AACA,cAAA,GAAA,GAAA,GAAA,CAAA,WAAA,CACA,KAAA,UADA,EAEA,IAAA,CAAA,KAAA,CAAA,KAAA,KAAA,CAFA,CAAA;AAIA,cAAA,KAAA,CAAA,GAAA,CAAA;AACA,aANA,MAMA;AACA,cAAA,KAAA,CAAA,6CAAA,CAAA;AACA;;AACA;;AACA;AApBA;AAsBA,OAxBA,CAwBA,OAAA,CAAA,EAAA;AACA,QAAA,KAAA,mBAAA,CAAA,CAAA,OAAA,EAAA;AACA;AACA;AA7BA;AAXA,CAAA","sourcesContent":["<style scoped>\n.floatLeft {\n  float: left;\n}\n.fullWidth {\n  width: 100%;\n}\n.fullbody {\n  width: 500px;\n}\n.note{\n  border: 1px solid #80808030;\n  color: #808080bf;\n  background: #ffff001f;\n}\n</style>\n<template>\n  <div class=\"asymmetric\">\n    <div class=\"col-md-12\">\n      <div>\n        <b-card no-body>\n          <b-tabs card vertical nav-wrapper-class=\"w-30\">\n            <b-tab title=\"Introduction\">\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <div class=\"form-group\">\n                      <h4>Zero Knowledge Proof of Age</h4>\n                      <hr>\n                      <p>\n                        In cryptography, a zero-knowledge proof or zero-knowledge protocol is a method by which one party (the prover) can prove to another party (the verifier) that they know a value x, without conveying any information apart from the fact that they know the value x. The essence of zero-knowledge proofs is that it is trivial to prove that one possesses knowledge of certain information by simply revealing it; the challenge is to prove such possession without revealing the information itself or any additional information. (Source: <a href=\"https://en.wikipedia.org/wiki/Zero-knowledge_proof\">Wikipedia</a>)\n                      </p>\n                      <p>\n                        In this demo I (the holder) want to proof to someone (the verifier) that his age is above certain number (say 18+). To do that\n                        I will ask my issuer to issue me a certificate (which will contain the challenge and the proof) - the zero knowledge proof - so that I can produce that to the verifier.\n                        The verifier then can verify the the proof submitted by my without having to know my real age.\n                      </p>\n                      <hr>\n                      <p>\n                        We used the concept of <a href=\"https://en.wikipedia.org/wiki/Hash_chain\">hash chaining</a> for implementation. The implementation is inspired from <a href=\"https://www.stratumn.com/thinking/zero-knowledge-proof-of-age-using-hash-chains/\" target=\"_blank\">this</a> and <a href=\"https://labs.imaginea.com/zero-knowledge-proof-of-age/\" target=\"_blank\">this</a> blog posts.\n                      </p>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Generate Proof\">\n              <b-card-text>\n                <div class=\"row note\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <p>\n                      Here, the user(or the holder) will ask trusted issuer to generate the proving kit, which contains <b>proof</b> and <b>challenge</b> by providing his actual age and the age to prove. Notice the proof (or claim) does not reveals any of his information except the fact that he is above certain age.\n                      <br>\n                      <i>\n                      proof = HASH^(1 + actualAge)(randomeed); <br>\n                      challenge = HASH^(1 + actualAge - ageToProve)(random-seed);\n                      </i>\n                    </p>\n                  </form>\n                </div>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-4\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Actual age:</label>\n                      <input type=\"number\" style=\"width:100%\" v-model=\"actualAge\"/>\n                    </div>\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Age to prove:</label>\n                      <input type=\"number\" style=\"width:100%\" v-model=\"ageToProve\"/>\n                    </div>\n                    <div class=\"form-group floatLeft\">\n                      <button\n                        type=\"button\"\n                        data-toggle=\"modal\"\n                        @click=\"operation('generateProof')\"\n                        class=\"btn btn-primary\"\n                      >Generate Proof</button>\n                    </div>\n                  </form>\n                  <form action=\"#\" class=\"col-md-8\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Proving Kit:</label>\n                      <textarea class=\"form-control\" v-model=\"proof\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Verify Proof\">\n              <b-card-text>\n                <div class=\"row note\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <p>\n                      Once receieved the proving kit, the verifier can verify the claim. \n                      <br>\n                      <i>\n                      1. verification = hash^(ageToProve)(challenge) <br>\n                      2. Check if the verification == proof;\n                      </i>\n                    </p>\n                  </form>\n                </div>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <label class=\"floatLeft\">Proving Kit:</label>\n                        <textarea class=\"form-control\" v-model=\"proof\" rows=\"8\" cols=\"50\"></textarea>\n                      </div>\n                      <div class=\"form-group col-md-6\">\n                        <label class=\"floatLeft\">Age to prove:</label>\n                        <input type=\"number\" style=\"width:100%\" v-model=\"ageToProve\"/>\n                      </div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <button\n                          type=\"button\"\n                          data-toggle=\"modal\"\n                          @click=\"operation('verifyProof')\"\n                          class=\"btn btn-primary floatLeft\"\n                        >Verify Proof</button>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n          </b-tabs>\n        </b-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst asymmetric = require(\"../crypto-lib/asymmetric\");\nconst zkp = require('../crypto-lib/zkp')\nexport default {\n  name: \"ZKPPage\",\n  components: {},\n  data() {\n    return {\n      actualAge: 38,\n      ageToProve: 18,\n      proof: \"\"\n    };\n  },\n  created() {},\n  methods: {\n    operation: function(op) {\n      try {\n        let res = \"\";\n        switch (op) {\n          case \"generateProof\":\n            if (this.actualAge != \"\" && this.ageToProve != \"\") {\n              res = zkp.generateProof(this.actualAge, this.ageToProve);\n              this.proof = JSON.stringify(res);\n            } else {\n              alert(\"Error: Actual age or Age to prove can not be empty\");\n            }\n            break;\n          case \"verifyProof\":\n            if (this.proof != {} || this.ageToProve != \"\") {\n              res = zkp.verifyProof(\n                this.ageToProve,\n                JSON.parse(this.proof)\n              );\n              alert(res)\n            } else {\n              alert(\"Error: Proving kit or Age to prove is empty\");\n            }\n            break;\n          default:\n        }\n      } catch (e) {\n        alert(`Error : ${e.message}`);\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components"}]}