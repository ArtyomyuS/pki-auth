{"remainingRequest":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/babel-loader/lib/index.js!/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/components/Asymmetric.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/src/components/Asymmetric.vue","mtime":1597556471391},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/pkiAuth/dashboard/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar asymmetric = require(\"../crypto-lib/asymmetric\");\n\nexport default {\n  name: \"AssymetricPage\",\n  components: {},\n  data: function data() {\n    return {\n      publickey: \"\",\n      privatekey: \"\",\n      plaintext: \"This is your secret message!\",\n      recipientPublicKey: \"\",\n      recipientSecretKey: \"\",\n      cipherText: \"\",\n      decryptPlaintext: \"\",\n      senderPrivateKey: \"\",\n      signedMessage: \"\",\n      senderPublicKey: \"\"\n    };\n  },\n  created: function created() {},\n  methods: {\n    generatekp: function generatekp() {\n      var keys = asymmetric.generateKeyPair();\n      this.publickey = keys.publicKey;\n      this.privatekey = keys.secretKey;\n    },\n    operation: function operation(op) {\n      try {\n        var res = \"\";\n\n        switch (op) {\n          case \"encrypt\":\n            if (this.recipientPublicKey != \"\" && this.plaintext != \"\") {\n              res = asymmetric.encrypt(this.plaintext, this.recipientPublicKey);\n              this.cipherText = JSON.stringify(res);\n            } else {\n              alert(\"Error: Plaintext or recipeint's public key is empty\");\n            }\n\n            break;\n\n          case \"decrypt\":\n            if (this.cipherText != {}) {\n              res = asymmetric.decrypt(this.recipientSecretKey, JSON.parse(this.cipherText));\n              this.decryptPlaintext = JSON.stringify(res);\n            } else {\n              alert(\"Error: Ciphertext is empty\");\n            }\n\n            break;\n\n          default:\n        }\n      } catch (e) {\n        alert(\"Error : \".concat(e.message));\n      }\n    },\n    dsOperation: function dsOperation(op) {\n      try {\n        var res = \"\";\n\n        switch (op) {\n          case \"sign\":\n            if (this.senderPrivateKey != \"\" && this.plaintext != \"\") {\n              res = asymmetric.sign(this.plaintext, this.senderPrivateKey);\n              this.signedMessage = res;\n            } else {\n              alert(\"Error: Plaintext or recipeint's public key is empty\");\n            }\n\n            break;\n\n          case \"verify\":\n            if (this.signedMessage != \"\" && this.plaintext != \"\" && this.senderPublicKey != \"\") {\n              res = asymmetric.verify(this.plaintext, this.signedMessage, this.senderPublicKey);\n              alert(res);\n            } else {\n              alert(\"Error: Ciphertext is empty\");\n            }\n\n            break;\n\n          default:\n        }\n      } catch (e) {\n        alert(\"Error : \".concat(e.message));\n      }\n    }\n  }\n};",{"version":3,"sources":["Asymmetric.vue"],"names":[],"mappings":"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","sourcesContent":["<style scoped>\n.floatLeft {\n  float: left;\n}\n.fullWidth {\n  width: 100%;\n}\n.fullbody {\n  width: 500px;\n}\n</style>\n<template>\n  <div class=\"asymmetric\">\n    <div class=\"col-md-12\">\n      <div>\n        <b-card no-body>\n          <b-tabs card vertical nav-wrapper-class=\"w-30\">\n            <b-tab title=\"Key Pair\" active>\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <div class=\"form-group floatLeft\">\n                      <button\n                        type=\"button\"\n                        class=\"btn btn-primary\"\n                        @click=\"generatekp()\"\n                      >Generate Keypair</button>\n                    </div>\n                  </form>\n                </div>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <div class=\"form-group\">\n                      <table class=\"table table-bordered\">\n                        <tr>\n                          <th>Public Key</th>\n                          <td>\n                            <input type=\"text\" style=\"width:100%\" v-model=\"publickey\" disabled />\n                          </td>\n                        </tr>\n                        <tr>\n                          <th>Private Key</th>\n                          <td>\n                            <input type=\"text\" style=\"width:100%\" v-model=\"privatekey\" disabled />\n                          </td>\n                        </tr>\n                      </table>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Encryption\">\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Plain Text:</label>\n                      <textarea class=\"form-control\" v-model=\"plaintext\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Recipient's Public Key:</label>\n                      <input type=\"text\" v-model=\"recipientPublicKey\" class=\"form-control\" />\n                    </div>\n                    <div class=\"form-group floatLeft\">\n                      <button\n                        type=\"button\"\n                        data-toggle=\"modal\"\n                        @click=\"operation('encrypt')\"\n                        class=\"btn btn-primary\"\n                      >Encrypt</button>\n                    </div>\n                  </form>\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Cipher Text:</label>\n                      <textarea class=\"form-control\" v-model=\"cipherText\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Decryption\">\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Cipher Text:</label>\n                      <textarea class=\"form-control\" v-model=\"cipherText\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Recipient's Private Key:</label>\n                      <input type=\"text\" v-model=\"recipientSecretKey\" class=\"form-control\" />\n                    </div>\n                    <div class=\"form-group floatLeft\">\n                      <button\n                        type=\"button\"\n                        data-toggle=\"modal\"\n                        @click=\"operation('decrypt')\"\n                        class=\"btn btn-primary\"\n                      >Decrypt</button>\n                    </div>\n                  </form>\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Plain Text:</label>\n                      <textarea class=\"form-control\" v-model=\"decryptPlaintext\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Sign\">\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Plain Text:</label>\n                      <textarea class=\"form-control\" v-model=\"plaintext\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Sender's Private Key:</label>\n                      <input type=\"text\" v-model=\"senderPrivateKey\" class=\"form-control\" />\n                    </div>\n                    <div class=\"form-group floatLeft\">\n                      <button\n                        type=\"button\"\n                        data-toggle=\"modal\"\n                        @click=\"dsOperation('sign')\"\n                        class=\"btn btn-primary\"\n                      >Sign</button>\n                    </div>\n                  </form>\n                  <form action=\"#\" class=\"col-md-6\">\n                    <div class=\"form-group\">\n                      <label class=\"floatLeft\">Signed Message:</label>\n                      <textarea class=\"form-control\" v-model=\"signedMessage\" rows=\"8\" cols=\"50\"></textarea>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n            <b-tab title=\"Verify\">\n              <b-card-text>\n                <div class=\"row\">\n                  <form action=\"#\" class=\"col-md-12\">\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <label class=\"floatLeft\">Signed Message:</label>\n                        <textarea class=\"form-control\" v-model=\"signedMessage\" rows=\"8\" cols=\"50\"></textarea>\n                      </div>\n                      <div class=\"form-group col-md-6\">\n                        <label class=\"floatLeft\">Plain Text:</label>\n                        <textarea class=\"form-control\" v-model=\"plaintext\" rows=\"8\" cols=\"50\"></textarea>\n                      </div>\n                    </div>\n                    <div class=\"row\">\n                      <div class=\"form-group col-md-6\">\n                        <label class=\"floatLeft\">Sender's Public Key:</label>\n                        <input type=\"text\" v-model=\"senderPublicKey\" class=\"form-control\" />\n                      </div>\n                      <div class=\"form-group col-md-6\">\n                        <button\n                          type=\"button\"\n                          data-toggle=\"modal\"\n                          @click=\"dsOperation('verify')\"\n                          class=\"btn btn-primary floatLeft\"\n                        >Verify</button>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n              </b-card-text>\n            </b-tab>\n          </b-tabs>\n        </b-card>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nconst asymmetric = require(\"../crypto-lib/asymmetric\");\nexport default {\n  name: \"AssymetricPage\",\n  components: {},\n  data() {\n    return {\n      publickey: \"\",\n      privatekey: \"\",\n      plaintext: \"This is your secret message!\",\n      recipientPublicKey: \"\",\n      recipientSecretKey: \"\",\n      cipherText: \"\",\n      decryptPlaintext: \"\",\n      senderPrivateKey: \"\",\n      signedMessage: \"\",\n      senderPublicKey: \"\"\n    };\n  },\n  created() {},\n  methods: {\n    generatekp: function() {\n      const keys = asymmetric.generateKeyPair();\n      this.publickey = keys.publicKey;\n      this.privatekey = keys.secretKey;\n    },\n    operation: function(op) {\n      try {\n        let res = \"\";\n        switch (op) {\n          case \"encrypt\":\n            if (this.recipientPublicKey != \"\" && this.plaintext != \"\") {\n              res = asymmetric.encrypt(this.plaintext, this.recipientPublicKey);\n              this.cipherText = JSON.stringify(res);\n            } else {\n              alert(\"Error: Plaintext or recipeint's public key is empty\");\n            }\n            break;\n          case \"decrypt\":\n            if (this.cipherText != {}) {\n              res = asymmetric.decrypt(\n                this.recipientSecretKey,\n                JSON.parse(this.cipherText)\n              );\n              this.decryptPlaintext = JSON.stringify(res);\n            } else {\n              alert(\"Error: Ciphertext is empty\");\n            }\n            break;\n          default:\n        }\n      } catch (e) {\n        alert(`Error : ${e.message}`);\n      }\n    },\n    dsOperation: function(op) {\n      try {\n        let res = \"\";\n        switch (op) {\n          case \"sign\":\n            if (this.senderPrivateKey != \"\" && this.plaintext != \"\") {\n              res = asymmetric.sign(this.plaintext, this.senderPrivateKey);\n              this.signedMessage = res;\n            } else {\n              alert(\"Error: Plaintext or recipeint's public key is empty\");\n            }\n            break;\n          case \"verify\":\n            if (\n              this.signedMessage != \"\" &&\n              this.plaintext != \"\" &&\n              this.senderPublicKey != \"\"\n            ) {\n              res = asymmetric.verify(\n                this.plaintext,\n                this.signedMessage,\n                this.senderPublicKey\n              );\n              alert(res);\n            } else {\n              alert(\"Error: Ciphertext is empty\");\n            }\n            break;\n          default:\n        }\n      } catch (e) {\n        alert(`Error : ${e.message}`);\n      }\n    }\n  }\n};\n</script>\n"],"sourceRoot":"src/components"}]}