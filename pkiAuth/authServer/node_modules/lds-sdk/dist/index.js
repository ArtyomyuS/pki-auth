"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsonSigs = require('jsonld-signatures');
var Ed25519KeyPair = require('crypto-ld').Ed25519KeyPair;
var AuthenticationProofPurpose = jsonSigs.purposes.AuthenticationProofPurpose;
var Ed25519Signature2018 = jsonSigs.suites.Ed25519Signature2018;
var documentLoader = require('jsonld').documentLoader;
var uuidv4 = require('uuid').v4;
var DID_SCHEME = 'did:hsauth';
var compactProof = false;
// Generate new key pairs
var generateKeys = function (name) { return __awaiter(void 0, void 0, void 0, function () {
    var kp, eKp, publicKey;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Ed25519KeyPair.generate()];
            case 1:
                kp = _a.sent();
                kp.id = DID_SCHEME + ":" + name + "#" + kp.fingerprint();
                return [4 /*yield*/, kp.export()];
            case 2:
                eKp = _a.sent();
                publicKey = __assign({ '@context': jsonSigs.SECURITY_CONTEXT_URL }, eKp);
                delete publicKey['privateKeyBase58'];
                return [2 /*return*/, {
                        privateKeyBase58: eKp.privateKeyBase58,
                        publicKey: publicKey
                    }];
        }
    });
}); };
function getChallange() {
    return uuidv4();
}
exports.getChallange = getChallange;
// Get challenge
function getUserDoc(user) {
    user["@context"] = ["https://schema.org", "https://w3id.org/security/v1"];
    user["@type"] = "https://schema.org/Person";
    return user;
}
exports.getUserDoc = getUserDoc;
// Sign the doc
function sign(params) {
    return __awaiter(this, void 0, void 0, function () {
        var doc, privateKeyBase58, publicKey, challenge, domain, signed;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    doc = params.doc, privateKeyBase58 = params.privateKeyBase58, publicKey = params.publicKey, challenge = params.challenge, domain = params.domain;
                    return [4 /*yield*/, jsonSigs.sign(doc, {
                            suite: new Ed25519Signature2018({
                                verificationMethod: publicKey.id,
                                key: new Ed25519KeyPair(__assign({ privateKeyBase58: privateKeyBase58 }, publicKey))
                            }),
                            purpose: new AuthenticationProofPurpose({
                                challenge: challenge,
                                domain: domain
                            }),
                            documentLoader: documentLoader,
                            compactProof: compactProof
                        })];
                case 1:
                    signed = _a.sent();
                    return [2 /*return*/, signed];
            }
        });
    });
}
exports.sign = sign;
// verify the signature
function verify(params) {
    return __awaiter(this, void 0, void 0, function () {
        var doc, publicKey, challenge, domain, controller, verified;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    doc = params.doc, publicKey = params.publicKey, challenge = params.challenge, domain = params.domain, controller = params.controller;
                    return [4 /*yield*/, jsonSigs.verify(doc, {
                            suite: new Ed25519Signature2018({
                                key: new Ed25519KeyPair(publicKey)
                            }),
                            purpose: new AuthenticationProofPurpose({
                                controller: controller,
                                challenge: challenge,
                                domain: domain
                            }),
                            documentLoader: documentLoader,
                            compactProof: compactProof
                        })];
                case 1:
                    verified = _a.sent();
                    return [2 /*return*/, verified];
            }
        });
    });
}
exports.verify = verify;
// Generate credential [keys  and controller object]
function getCredential(name) {
    return __awaiter(this, void 0, void 0, function () {
        var keys, publicKey, controller, credential;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!name)
                        throw Error('Name must be passed.');
                    return [4 /*yield*/, generateKeys(name)];
                case 1:
                    keys = _a.sent();
                    publicKey = keys.publicKey;
                    controller = {
                        '@context': jsonSigs.SECURITY_CONTEXT_URL,
                        id: DID_SCHEME + ":" + name,
                        publicKey: [publicKey],
                        authentication: [publicKey.id]
                    };
                    credential = {
                        keys: keys,
                        controller: controller
                    };
                    return [2 /*return*/, credential];
            }
        });
    });
}
exports.getCredential = getCredential;
