https://sequencediagram.org/index.html#initialData=C4S2BsFMAIBUAsQGdrOgQ2qCkBQuAHdAJ1AGMQiA7YaAI2IHsB3JSYwk8y9G6AM3RlIdRowDWnUiArVabYgDd2+fAxYLoAWgB8C5cQBc0APToArsHgnBw0RPz722nbZFjxh+MGAFDJmyF3CQA6MkYAWxNwRgBzECoAHSoABRJ0CKRjAG9k6GgycBBIGgBJABFjAHIAZhqATgAmGoBGAFZ6gDYAFk6AdjbGzqqAGjyCopLgAGVIMmJIYGq6fkgh9EaABjJ6zcgAExbIPprO-cgWsm66Pv4+-YAOGsPR8bJ0cHA6IXEAVQAlAAy1W8vn80UY73A8EYSCWNU2iLMlmsbns4hMUK+P1eVHyBCY-BAUAAYsVwPsstAANrQKqQCLoYmjOlUDKQKrQAC6yQAvvgqIxgDBGAYBEF0cYAMLwObiVD8CbFPhoBbxOHsA4CoUisVojzGACCSHEKHMmmAjGgMXiVHw+okLnUrGcxiQMNYAjo1riCWgRFieFwguF0FFzmdCmM5ucCQIlhQNr98wOUxAHyQITUTBdxG0ugdnlMSaSqWIGXQWWyMeIbIikBG-srSGYjGI+35wZ1Yb1EoNGBRafewrNCntfcduicRlBfgCMShMLhhgRSIsVkCdg8mI+2LI4mSaXLmRyyRr5XQwHQhlyePy0AA+gArJCMKinu-36AMpngaqKZB4HMEJeF4Q4AAFYkZYkwkiXEv3ycBK2AB860gaoACEgPdXh4IQoliDhVD2WqAA1QDmErPCvxAfZqhaRp6haBFGkaB4Bm6B4Ok2KpxnyXkxjZMhhCQJBYAkEpjAAUUNQ0pM2eBukBAA5FpfgATQww0MKlFoQhCeoAC0pX2RhDIwqTplKABFQzyjsztcGnLRdEjdhjAAeQAaVwIA


https://sequencediagram.org/index.html#initialData=C4S2BsFMAIAUGkCSBaAggVQCoAkBc1UBXYAC0gDtQBjAQ1AHtyAoJgBxoCdqR3LpCAzpA6oA5hWBtO3XsGhVwICS3ZcQVHjT41iJAMrCAbsKlqNs6DVasDHYxxWca4KODgdIyDwEdCIAWCQTDQARvQAHtD09pa6tvYANILCYhIAxFQAnlq46EIi4nz+0B6i-sDCkAAm0ADuYCQEcUbCADrkWjUkNALQAFR9sBz0AGYgUNDwkJnsIBwDuO0A3qzDY1CwhCEA1gnQq6PjkEMghvAAvsFhkdHCsaTxwglWNi0caZmQLvS1uKjWjw40GKpXKlRq9VI0HaRAeb0s5AhPWBAgEhGqi3ISxeiCqexeBioHmAl1UzlcURGIxY5HoFSiMQUSko+GSQNWkFR0AAROB6GVyNzoCFiMBGFFyNBSDBapAQuxxEwmRJoMgAHwEt74AD0OlI2r5AqYomGhFY0AAwt0XBRxNAAGTQPS0cjkEDkUTQACKACVggC3uq9fotT7IL5OcBelbybbIAA6dqwJwAW3w2OsuPxAaJkBJTFp9NuQODgPwVsgVG2wJGUpIxX+5pBkDKAgqHiq8YLdJgxfuIbswlwAEZ49AAOIUYR0aqWeTWqAemAAXn4fiqAAoAJTtABMY4APFR6HyOLg0iFwOi1QApADqmBjNqX0FXACtasAAPoBUTkDcZqwWZUAucbnHsH7AISxJbge2rHqearBM0g5Asg6qWAGqG4GGAisIwQiWqBS5JqmAjpvej7EeIewgbGS6XBQVQsJqqGquqyost6PryPQVQwFUdA0HsAAy-LuvsNCKoWvaMooEi4HoAAi8DQAIJA-L00rcbx-ESnWMCGu6CoJkq8l8OhapsqkLJ5HcAgulpZA6ce-GJuQyYcDQKbkdASzQJRT6LjR870SFHZzJWwDoBw4DnNALDGqa5p6CAf50IQHjQIU04MJKnTQPYIBjLQeXdkWMTWYUwC4EeJ70GeF5XpAaq-uQ1RKfQVCvmpaX-mynVUHsBzrMcHCnPACTtCNRybDsCR0c+IVVPQKY0O6sHwfVHBIVVKpBih9i4GJArQGGEZtgA3KRXk+emqV-h1XXpgNQnDcMozga0M0bFsuyhUtkB7BFHhUNFsXnO02CQDQ-EcL5ADaADk4TIMGyBitsFBI-ggXUZAAC65WyXcpZaqO0AAKLhMAXlg9AKNo7oGP0Fj5BI9AZCw205D7nVp7npe15LItwVA5hQFVOc76fl+RUjJkG542F4uQdBeabQhDVqnuY4VlWNYS7i0CQOE5QCGOxMMqTh1DhT+vbL0xUGfsayzVsqmm+bwKSlUIRRNKHD1IRHhvlF7n7tAABqwjFZkLt0MANAgbOByjJd0KStA-MNYLzVqvLisPe1VSDe9hy-SEk0rWt7q0fjmvbTr5AAMxjtTtPJ3I2kDK9ScDNAIzDCmvWPaXXXtAALGOk7tV59IDOpNAtxufc0FuAztAArHrZBVk7tbad06k+9AfuvquOXz7Ox8kMhcJsZZe1cbh+GEQA8tsXZMSwJr0GaZ1qiRTBiARg98BwxCDFhI6AAxBqtROBVF6EZSUPh0Rtn4AED0JQgGg3BuAG63lfJLDXuXUac0LhWz7KxI60B7Z70dobH6xwPYmzNm2J2vsQgAH5dbQEQLWQsexZ65RgIvboK814bz6O0aAci2wNRgO6MUZ8QhjjpGQIO-gYCiHoNAdqNM1IVFYFQmINChwiOvr0YMDUQAAC86CgPIO0HOjUhYtUoj1SCP4+qr3yEpN60A1aVhgnBLWO1-SvEfgdB+tDX4ERgJ-Ls5i0IcXMjVaAJ0JIeDwgkjOnkiEUQfHsNejFESJSYEAA



title PKI-AUTH: Authentication

participant userAgent
participant client

participant authServer
participant appServer

parallel Pre-requisite
abox over authServer,userAgent#cyan:UserAgent is registered with AuthServer\nand has **Profile Keypair**:\n{profilePubk, profilePrivK}
abox over authServer,appServer#yellow:AppServer is registered with \nAuthServer and was issued:\n{appId, appSecret}
parallel off

note over client: user press "login" button on the webpage
client ->appServer: /auth/login
group Challenge & Scanning QR
appServer->authServer:Requests Challenge.\nParam: {appId, appSecret, callback_uri}
note over authServer: Check if this App is registered.
note over authServer:1. Generated a challenge = uuid()\n2. <color:#blue>JWTChallenge = jwt_sign({appId,challenge}, jwtSecret)</color>
authServer --> appServer:Response Challenge\nParams: {JWTChallenge, challenge}
end

appServer -->client: QR code data, Login page
note over client:SDK shows the QR code on the loginpage.
client -->userAgent:User scans the QR code.\nParams: { JWTChallenge, challenge, redirectUrl} 


group Signature generation and verification
note over userAgent:<color:#blue>signedDoc = sign(userDoc, profilePrivK,\nprofilePubk,challenge, domain)</color>
userAgent ->authServer:Login Request;\nParams: {SignedDoc: {userData, proof},\profilePubk, challenge, redirectUrl}\nHeaders: ['x-auth-token': JWTChallenge]
note over authServer:1. Extract 'x-auth-token' header\n2.<color:#blue>{challenge, appId}= jwt_verify(JWTChallenge, jwtSecret)</color>\n2. Check if appId exists. 
note over authServer:1. Checks if the profilePubK exists in db otherwise reject.\n2. Verify the attached proof; \n  <color:#blue>verify(SignedDoc, profilePubK,domain, challenge)</color>\n3. Extract the **userData** from signedDoc\n4. Generate **sha3(userData)**\n5. Checks if the hash in db == generated hash
authServer -->userAgent: Respose Ok.
end

group Redirection
authServer ->appServer:Forwards login request using redirectUrl\nParams: {userData, profilePubK}
note over appServer: 1. Checks if profilePubK exists in db?\n2. If not, Generate **sha3(userData)**\n   store into db. otherwise go next step
note over appServer:Generates authorization\n<color:#blue>JWT = jwt_sign(userData, jwtSecret)</color>
appServer -->authServer: Response Ok.
appServer -->client: Login response; Params: {JWT, userData}
end



