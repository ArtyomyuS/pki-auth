{"remainingRequest":"/home/vishwas/work/pki-auth/client/node_modules/babel-loader/lib/index.js!/home/vishwas/work/pki-auth/client/node_modules/eslint-loader/index.js??ref--13-0!/home/vishwas/work/pki-auth/client/src/crypto-lib/asymmetric.js","dependencies":[{"path":"/home/vishwas/work/pki-auth/client/src/crypto-lib/asymmetric.js","mtime":1597338519772},{"path":"/home/vishwas/work/pki-auth/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/vishwas/work/pki-auth/client/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\n// Ref: https://github.com/aeternity/aepp-sdk-js/blob/f2088c405ff6071f6b809c279231a3dff40e6ffb/es/utils/crypto.js\nvar nacl = require('tweetnacl');\n\nvar bs58check = require('bs58check');\n\nvar _require = require('blakejs'),\n    blake2b = _require.blake2b;\n\nvar ed2curve = require('ed2curve');\n\nvar signer = require('nacl-signature');\n\nnacl.util = require('tweetnacl-util');\n\nfunction encodeBase58Check(input) {\n  return bs58check.encode(Buffer.from(input));\n}\n\nfunction decodeBase58Check(str) {\n  return bs58check.decode(str);\n}\n\nexport function generateKeyPair() {\n  var keyPair = nacl.sign.keyPair();\n  var publicBuffer = Buffer.from(keyPair.publicKey);\n  var secretBuffer = Buffer.from(keyPair.secretKey);\n  return {\n    publicKey: encodeBase58Check(publicBuffer),\n    secretKey: secretBuffer.toString('hex')\n  };\n}\nexport function encrypt(msg, publicKey) {\n  var ephemeralKeyPair = nacl.box.keyPair();\n  var pubKeyUInt8Array = decodeBase58Check(publicKey);\n  var nonce = nacl.randomBytes(nacl.box.nonceLength);\n  var encryptedMessage = nacl.box(Buffer.from(msg), nonce, ed2curve.convertPublicKey(pubKeyUInt8Array), ephemeralKeyPair.secretKey);\n  return {\n    ciphertext: Buffer.from(encryptedMessage).toString('hex'),\n    ephemPubKey: Buffer.from(ephemeralKeyPair.publicKey).toString('hex'),\n    nonce: Buffer.from(nonce).toString('hex'),\n    version: 'x25519-xsalsa20-poly1305'\n  };\n}\nexport function decrypt(secretKey, encryptedData) {\n  var receiverSecretKeyUint8Array = ed2curve.convertSecretKey(Buffer.from(secretKey, 'hex'));\n  var nonce = Buffer.from(encryptedData.nonce, 'hex');\n  var ciphertext = Buffer.from(encryptedData.ciphertext, 'hex');\n  var ephemPubKey = Buffer.from(encryptedData.ephemPubKey, 'hex');\n  var decrypted = nacl.box.open(ciphertext, nonce, ephemPubKey, receiverSecretKeyUint8Array);\n  return decrypted ? nacl.util.encodeUTF8(decrypted) : decrypted;\n}\nexport function hash(input) {\n  return Buffer.from(blake2b(input, null, 32)).toString('hex'); // 256 bits\n}\nexport function sign(data, privateKey) {\n  return Buffer.from(nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey, 'hex'))).toString('hex');\n}\nexport function verify(message, signature, publicKey) {\n  signature = Buffer.from(signature, 'hex');\n  publicKey = decodeBase58Check(publicKey);\n  return signer.verify(message, signature, publicKey);\n}",{"version":3,"sources":["/home/vishwas/work/pki-auth/client/src/crypto-lib/asymmetric.js"],"names":["nacl","require","bs58check","blake2b","ed2curve","signer","util","encodeBase58Check","input","encode","Buffer","from","decodeBase58Check","str","decode","generateKeyPair","keyPair","sign","publicBuffer","publicKey","secretBuffer","secretKey","toString","encrypt","msg","ephemeralKeyPair","box","pubKeyUInt8Array","nonce","randomBytes","nonceLength","encryptedMessage","convertPublicKey","ciphertext","ephemPubKey","version","decrypt","encryptedData","receiverSecretKeyUint8Array","convertSecretKey","decrypted","open","encodeUTF8","hash","data","privateKey","detached","verify","message","signature"],"mappings":"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","sourcesContent":["// Ref: https://github.com/aeternity/aepp-sdk-js/blob/f2088c405ff6071f6b809c279231a3dff40e6ffb/es/utils/crypto.js\n\nconst nacl = require('tweetnacl')\nconst bs58check = require('bs58check')\nconst { blake2b } = require('blakejs')\nconst ed2curve = require('ed2curve')\nconst signer = require('nacl-signature')\nnacl.util = require('tweetnacl-util')\n\n\nfunction encodeBase58Check(input) {\n  return bs58check.encode(Buffer.from(input))\n}\n\nfunction decodeBase58Check(str) {\n  return bs58check.decode(str)\n}\n\nexport function generateKeyPair() {\n  const keyPair = nacl.sign.keyPair()\n  const publicBuffer = Buffer.from(keyPair.publicKey)\n  const secretBuffer = Buffer.from(keyPair.secretKey)\n  return {\n    publicKey: encodeBase58Check(publicBuffer),\n    secretKey: secretBuffer.toString('hex')\n  }\n}\n\nexport function encrypt(msg, publicKey) {\n  const ephemeralKeyPair = nacl.box.keyPair()\n  const pubKeyUInt8Array = decodeBase58Check(publicKey)\n  const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n  const encryptedMessage = nacl.box(\n    Buffer.from(msg),\n    nonce,\n    ed2curve.convertPublicKey(pubKeyUInt8Array),\n    ephemeralKeyPair.secretKey\n  )\n\n  return {\n    ciphertext: Buffer.from(encryptedMessage).toString('hex'),\n    ephemPubKey: Buffer.from(ephemeralKeyPair.publicKey).toString('hex'),\n    nonce: Buffer.from(nonce).toString('hex'),\n    version: 'x25519-xsalsa20-poly1305'\n  }\n}\n\nexport function decrypt(secretKey, encryptedData) {\n  const receiverSecretKeyUint8Array = ed2curve.convertSecretKey(Buffer.from(secretKey, 'hex'))\n  const nonce = Buffer.from(encryptedData.nonce, 'hex')\n  const ciphertext = Buffer.from(encryptedData.ciphertext, 'hex')\n  const ephemPubKey = Buffer.from(encryptedData.ephemPubKey, 'hex')\n  const decrypted = nacl.box.open(\n    ciphertext,\n    nonce,\n    ephemPubKey,\n    receiverSecretKeyUint8Array\n  )\n  return decrypted ? nacl.util.encodeUTF8(decrypted) : decrypted\n}\nexport function hash(input) {\n  return Buffer.from(blake2b(input, null, 32)).toString('hex') // 256 bits\n}\nexport function sign(data, privateKey) {\n  return Buffer.from(nacl.sign.detached(Buffer.from(data), Buffer.from(privateKey, 'hex'))).toString('hex')\n}\nexport function verify(message, signature, publicKey) {\n  signature = Buffer.from(signature, 'hex')\n  publicKey = decodeBase58Check(publicKey)\n  return signer.verify(message, signature, publicKey)\n}\n\n\n\n"]}]}